import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler, ConversationHandler

# ===== –ù–ê–°–¢–†–û–ô–ö–ò (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è) =====
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Railway
SOURCE_GROUP_ID = int(os.environ.get("SOURCE_GROUP_ID", -1001234567890))  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ)
TARGET_GROUP_ID = int(os.environ.get("TARGET_GROUP_ID", -1002807172405))
TARGET_TOPIC_ID = int(os.environ.get("TARGET_TOPIC_ID")) if os.environ.get("73") else None
logging.basicConfig(
    filename='bot.log',  # –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —Ñ–∞–π–ª
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ—Å—Ç–æ–≤
test_sessions = {}  # {test_id: {'text': str, 'status': str, 'target_msg_id': int, 'user_data': dict}}

# ===== –¢–ï–°–¢–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê =====
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    if update.effective_chat.id != SOURCE_GROUP_ID:
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_test")]])
    )
    return "AWAIT_TEST_TEXT"

async def handle_test_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç"""
    test_id = update.message.message_id
    test_text = update.message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω—é", callback_data=f"do_test_{test_id}")]]
    sent_msg = await context.bot.send_message(
        chat_id=TARGET_GROUP_ID,
        text=f"üõë –ó–ê–î–ê–ù–ò–ï üõë\n\n{test_text}",
        message_thread_id=TARGET_TOPIC_ID,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_sessions[test_id] = {
        'text': test_text,
        'status': 'active',  # active / in_progress / completed
        'target_msg_id': sent_msg.message_id,
        'user_data': None
    }
    
    await update.message.reply_text("‚úÖ –®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç!")
    return ConversationHandler.END

async def start_test_execution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–Ø –≤—ã–ø–æ–ª–Ω—é'"""
    query = update.callback_query
    await query.answer()
    
    test_id = int(query.data.split('_')[-1])
    if test_id not in test_sessions or test_sessions[test_id]['status'] != 'active':
        await query.answer("‚ö† –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω", show_alert=True)
        return
    
    user = query.from_user
    user_mention = f"@{user.username}" if user.username else user.first_name
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
    test_sessions[test_id]['status'] = 'in_progress'
    test_sessions[test_id]['user_data'] = {
        'id': user.id,
        'mention': user_mention,
        'photo': None,
        'number': None
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–º
    await query.edit_message_text(
        text=f"{query.message.text}\n\nüë§ –í—ã–ø–æ–ª–Ω—è–µ—Ç: {user_mention}",
        reply_markup=None
    )
    
    # –ü—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    await context.bot.send_message(
        chat_id=TARGET_GROUP_ID,
        text=f"{user_mention}, –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n1. –°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞",
        message_thread_id=TARGET_TOPIC_ID
    )

async def handle_test_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–æ–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_id = next((k for k, v in test_sessions.items() 
                      if v['status'] == 'in_progress' and v['user_data']['id'] == user_id), None)
        
        if not test_id:
            logger.warning(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        test = test_sessions[test_id]
        
        if update.message.photo:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–Ω–µ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
            photo = update.message.photo[1]
            test['user_data']['photo'] = photo.file_id
            logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ {test_id}")
            await update.message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞.")
            
        elif update.message.text and len(update.message.text) == 4 and update.message.text.isdigit():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            test['user_data']['number'] = update.message.text
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω", callback_data=f"test_passed_{test_id}")],
                [InlineKeyboardButton("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", callback_data=f"test_failed_{test_id}")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É
            await context.bot.send_photo(
              chat_id=SOURCE_GROUP_ID,
              photo=test['user_data']['photo'],
              caption=(
              f"üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–∞\n\n"
               f"–ù–æ–º–µ—Ä: {test['user_data']['number']}\n"
    ),
    reply_markup=InlineKeyboardMarkup(keyboard)
)
            
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
            
        elif update.message.text:
            await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_test_data: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_test_verification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        query = update.callback_query
        await query.answer()
        
        action, test_id = query.data.split('_')[1], int(query.data.split('_')[-1])
        if test_id not in test_sessions:
            await query.answer("‚ö† –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        test = test_sessions[test_id]
        user_mention = test['user_data']['mention']
        
        if action == "passed":
            # –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
            await context.bot.send_message(
                chat_id=TARGET_GROUP_ID,
                text=f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω {user_mention}!",
                message_thread_id=TARGET_TOPIC_ID
            )
        else:
            # –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
            keyboard = [[InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω—é", callback_data=f"do_test_{test_id}")]]
            await context.bot.send_message(
                chat_id=TARGET_GROUP_ID,
                text=f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω {user_mention}. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ù–û–í–û",
                message_thread_id=TARGET_TOPIC_ID
            )
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç
            await context.bot.send_message(
                chat_id=TARGET_GROUP_ID,
                text=f"üõë –ó–ê–î–ê–ù–ò–ï üõë\n\n{test['text']}",
                message_thread_id=TARGET_TOPIC_ID,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞
            test_sessions[test_id]['status'] = 'active'
            test_sessions[test_id]['user_data'] = None
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await query.message.edit_reply_markup(reply_markup=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_test_verification: {e}", exc_info=True)
        await query.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def cancel_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main() -> None:
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
    test_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('test', start_test)],
        states={
            "AWAIT_TEST_TEXT": [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_test_text)],
        },
        fallbacks=[CallbackQueryHandler(cancel_test, pattern="^cancel_test$")],
    )
    
    application.add_handler(test_conv_handler)
    application.add_handler(CallbackQueryHandler(start_test_execution, pattern="^do_test_"))
    application.add_handler(CallbackQueryHandler(handle_test_verification, pattern="^test_(passed|failed)_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞)
    application.add_handler(MessageHandler(
        filters.Chat(TARGET_GROUP_ID) & (filters.PHOTO | filters.TEXT),
        handle_test_data
    ))
    
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()